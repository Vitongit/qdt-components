/* eslint-disable camelcase,prefer-arrow-callback,no-plusplus,comma-dangle,no-loop-func,no-undef */
const loadCapabilityApis = async (config) => {
  try {
    const capabilityApisCSS = document.createElement('link');
    const prefix = (config.prefix !== '') ? `/${config.prefix}` : '';
    const ticket = (config.ticket !== '' && config.ticket !== undefined) ? `?qlikTicket=${config.ticket}` : '';
    capabilityApisCSS.href = `${(config.secure ? 'https://' : 'http://') + config.host + (config.port ? `:${config.port}` : '') + prefix}/resources/autogenerated/qlik-styles.css${ticket}`;
    capabilityApisCSS.type = 'text/css';
    capabilityApisCSS.rel = 'stylesheet';
    document.head.appendChild(capabilityApisCSS);
    capabilityApisCSS.loaded = new Promise((resolve) => {
      capabilityApisCSS.onload = () => { resolve(); };
    });
    const capabilityApisJS = document.createElement('script');
    capabilityApisJS.src = `${(config.secure ? 'https://' : 'http://') + config.host + (config.port ? `:${config.port}` : '') + prefix}/resources/assets/external/requirejs/require.js`;
    setTimeout(() => { document.head.appendChild(capabilityApisJS); }, 1000);
    capabilityApisJS.loaded = new Promise((resolve) => {
      capabilityApisJS.onload = () => { resolve(); };
    });
    await Promise.all([capabilityApisJS.loaded, capabilityApisCSS.loaded]);
  } catch (error) {
    throw new Error(error);
  }
};

const fields = ['Год', 'Месяц-год', 'Месяц'];
// const fields = ['Год', 'Месяц-год', 'Месяц', 'Неделя-год', 'Неделя', 'День месяца', 'День недели', 'Дата', 'Товарная группа 1', 'Товарная группа 2', 'Товарная группа 3', 'Товарная группа 4', 'Товарная группа 5', 'Номенклатура', 'Статус номенклатуры', 'Производитель', 'Тип номенклатуры', 'Артикул', 'СЕ Группа 1', 'СЕ Группа 2', 'СЕ Группа 3', 'СЕ Группа 4', 'Структурные единицы', 'Тип структурной единицы', 'Регион', 'Формат', 'Категория цен', 'Поставщик', 'Конкурент', 'Мероприятие', 'Акция', 'Тип оплаты', 'Кассир', 'Касса'];

const qApp = async (config) => {
  try {
    await loadCapabilityApis(config);
    const prefix = (config.prefix !== '') ? `/${config.prefix}/` : '/';
    window.require.config({
      baseUrl: `${(config.secure ? 'https://' : 'http://') + config.host + (config.port ? `:${config.port}` : '') + prefix}resources`,
      paths: {
        qlik: `${(config.secure ? 'https://' : 'http://') + config.host + (config.port ? `:${config.port}` : '') + prefix}resources/js/qlik`,
      },
    });
    return new Promise((resolve) => {
      window.require(['js/qlik'], (qlik) => {
        const app = qlik.openApp(config.appId, { ...config, isSecure: config.secure, prefix });
        for (let i = 0; i < fields.length; i++) {
          console.log('field:', fields[i]);
          app.createList({
            qDef: {
              qFieldDefs: [fields[i]] // set fieldname
            },
            qAutoSortByState: {
              qDisplayNumberOfRows: 1
            },
            qInitialDataFetch: [{
              qHeight: 1000, // can set number of rows returned
              qWidth: 1
            }]
          }, function (reply) {
            let rows = [];
            if (reply.qListObject.qDataPages.length > 0) {
              rows = _.flatten(reply.qListObject.qDataPages[0].qMatrix);
            }
            const selected = rows.filter(function (row) {
              return row.qState === 'S';
            });
            const values = [];
            for (let j = 0; j < selected.length; j++) {
              values.push(selected[j].qText);
            }

            // localStorage.setItem(reply.qListObject.qDimensionInfo.qFallbackTitle, JSON.stringify(values));
            const fieldName = reply.qListObject.qDimensionInfo.qFallbackTitle;
            if (localStorage.getItem(fieldName) !== JSON.stringify(values)) {
              if (localStorage.getItem('selectSrc') === 'sidebar') {
                localStorage.setItem('selectSrc', '');
              } else {
                localStorage.setItem('selectSrc', 'qlikobject');
              }
              localStorage.setItem(fieldName, JSON.stringify(values));
              // localStorage.setItem('lastQlikAppId', app.id);
            } else if (localStorage.getItem('selectSrc') === 'sidebar') {
              localStorage.setItem('selectSrc', '');
            }
          });
        }
        resolve(app);
      });
    });
  } catch (error) {
    throw new Error(error);
  }
};

export default qApp;
